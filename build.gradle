plugins {
	id 'java'
	id 'maven-publish'
	id 'fabric-loom' version '0.2.7-SNAPSHOT' apply false
}

allprojects {
	apply plugin: 'java' // pretty sure this is provided by loom or gradle too.
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'

    // todo: look into how get version from a sub project. For the case of lib mods like chainmail.
    // project(":chainmail").mod_version ??
	group = maven_group
	archivesBaseName = mod_id
	version = "${mod_version}+${minecraft_version}"

	java {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	// hack for test mods might be easy to make them sub projects too
	if (!gradle.startParameter.getTaskNames()[0].equals("runClient")) {
		sourceSets {
			main {
				java {
					exclude "ninjaphenix/test/**"
				}
			}
		}

	}

	minecraft {
		// todo eval if this works.
		refmapName = "${mod_id}-refmap.json"
	}

	// For external mod deps, internal ones should be able to include :projName
	repositories {
		mavenLocal()
	}

	dependencies {
		minecraft("com.mojang:minecraft:${minecraft_version}")
		mappings("net.fabricmc:yarn:${minecraft_version}+build.${yarn_version}:v2")
		modImplementation("net.fabricmc:fabric-loader:${loader_version}")
		modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

		modImplementation("me.shedaniel:RoughlyEnoughItems:${rei_version}") {
			exclude(group: "net.fabricmc", module: "fabric-loader")
			exclude(group: "net.fabricmc.fabric-api")
			exclude(group: "io.github.prospector", module: "modmenu")
		}

		modImplementation("io.github.prospector:modmenu:${modmenu_version}") {
			exclude(group: "net.fabricmc", module: "fabric-loader")
			exclude(group: "net.fabricmc.fabric-api")
		}

		compileOnly("org.checkerframework:checker-qual:3.0.1")
	}

	processResources {
		inputs.property "mod_version", mod_version
		from(sourceSets.main.resources.srcDirs) {
			include("fabric.mod.json")
			expand("version": mod_version)
		}
		from(sourceSets.main.resources.srcDirs) {
			exclude("fabric.mod.json")
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier.set("sources")
		from sourceSets.main.allSource
	}

	jar { from("LICENSE") }

	runClient {
		args = ["--username", "Dev"]
	}

	tasks.withType(JavaCompile) { options.setEncoding("UTF-8") }

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifactId = mod_id
				artifact(remapJar) {
					builtBy remapJar
				}
				artifact(sourcesJar) {
					classifier = "sources"
					builtBy remapSourcesJar
				}
			}
		}

		repositories {
			mavenLocal()
		}
	}
}